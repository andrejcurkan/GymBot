# handlers.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler, MessageHandler, filters, CallbackQueryHandler
from database import Client, get_db
from sqlalchemy.orm import Session

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
FULL_NAME, SUBSCRIPTION = range(2)  # –£–±—Ä–∞–ª–∏ NAME –∏ LAST_NAME, –¥–æ–±–∞–≤–∏–ª–∏ FULL_NAME

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
def get_subscription_keyboard():
    keyboard = [
        [InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ üóìÔ∏è", callback_data='3')],  # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ä–æ–∫–∞
        [InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ üóìÔ∏èüóìÔ∏è", callback_data='6')],
        [InlineKeyboardButton("12 –º–µ—Å—è—Ü–µ–≤ üóìÔ∏èüóìÔ∏èüóìÔ∏è", callback_data='12')],
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é
def get_menu_keyboard():
    keyboard = [
        ["üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å —Å–ø–æ—Ä—Ç–∞"],  # –≠–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç
        ["‚≠ê –û—Ç–∑—ã–≤—ã", "üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üí≤ –°–µ—Ç–∫–∞ —Ü–µ–Ω"],  # –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
        ["üí≥ –ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç"]  # –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏
    ]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª!* üèãÔ∏è‚Äç‚ôÇÔ∏è\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_menu_keyboard(),
        parse_mode="Markdown"  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Markdown
    )
    return ConversationHandler.END

## –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç"
async def buy(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "üí≥ *–ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç*\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤):",
        reply_markup=get_menu_keyboard(),
        parse_mode="Markdown"
    )
    return FULL_NAME  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FULL_NAME

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
async def get_full_name(update: Update, context: CallbackContext) -> int:
    full_name = update.message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    parts = full_name.split(maxsplit=1)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é

    if len(parts) < 2:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤).",
            reply_markup=get_menu_keyboard()
        )
        return FULL_NAME  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FULL_NAME, –µ—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ context.user_data
    context.user_data['first_name'] = parts[0]
    context.user_data['last_name'] = parts[1]

    await update.message.reply_text(
        "üóìÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:*",
        reply_markup=get_subscription_keyboard(),
        parse_mode="Markdown"
    )
    return SUBSCRIPTION  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SUBSCRIPTION
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
async def get_subscription(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    subscription_type = query.data
    context.user_data['subscription_type'] = subscription_type

    prices = {'3': 1000, '6': 1800, '12': 3000}
    price = prices.get(subscription_type, 0)
    if context.user_data.get('is_wholesale', False):
        price *= 0.9  # 10% —Å–∫–∏–¥–∫–∞ –¥–ª—è –æ–ø—Ç–æ–≤—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π

    context.user_data['balance'] = price
    await query.edit_message_text(
        f"üí≥ *–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:* {price} —Ä—É–±.\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ",
        parse_mode="Markdown"
    )

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É —á–µ—Ä–µ–∑ SQLAlchemy
    db: Session = next(get_db())
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º chat_id
        existing_client = db.query(Client).filter(Client.chat_id == update.effective_user.id).first()

        if existing_client:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
            existing_client.first_name = context.user_data['first_name']
            existing_client.last_name = context.user_data['last_name']
            existing_client.subscription_type = subscription_type
            existing_client.balance = price
            existing_client.is_wholesale = context.user_data.get('is_wholesale', False)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            client = Client(
                chat_id=update.effective_user.id,
                first_name=context.user_data['first_name'],
                last_name=context.user_data['last_name'],
                subscription_type=subscription_type,
                balance=price,
                is_wholesale=context.user_data.get('is_wholesale', False)
            )
            db.add(client)

        db.commit()
        await query.message.reply_text(
            "‚úÖ *–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!*",
            reply_markup=get_menu_keyboard(),
            parse_mode="Markdown"
        )
    except Exception as e:
        db.rollback()
        await query.message.reply_text(
            f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:* {e}",
            reply_markup=get_menu_keyboard(),
            parse_mode="Markdown"
        )
    finally:
        db.close()

    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
async def support(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üõü *–ü–æ–¥–¥–µ—Ä–∂–∫–∞*\n"
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ @support.",
        reply_markup=get_menu_keyboard(),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
async def reviews(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "‚≠ê *–û—Ç–∑—ã–≤—ã*\n"
        "–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.",
        reply_markup=get_menu_keyboard(),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ü–µ–Ω
async def prices(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üí≤ *–°–µ—Ç–∫–∞ —Ü–µ–Ω*\n"
        "–¶–µ–Ω—ã –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã:\n"
        "3 –º–µ—Å—è—Ü–∞ - 1000 —Ä—É–±.\n"
        "6 –º–µ—Å—è—Ü–µ–≤ - 1800 —Ä—É–±.\n"
        "12 –º–µ—Å—è—Ü–µ–≤ - 3000 —Ä—É–±.",
        reply_markup=get_menu_keyboard(),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é
async def handle_menu(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    if text == 'üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å —Å–ø–æ—Ä—Ç–∞':
        await update.message.reply_text(
            "üèãÔ∏è‚Äç‚ôÇÔ∏è *–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å —Å–ø–æ—Ä—Ç–∞*\n"
            "–°–ø–æ—Ä—Ç –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –∏ —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏.",
            reply_markup=get_menu_keyboard(),
            parse_mode="Markdown"
        )
    elif text == '‚≠ê –û—Ç–∑—ã–≤—ã':
        await reviews(update, context)
    elif text == 'üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        await support(update, context)
    elif text == 'üí≤ –°–µ—Ç–∫–∞ —Ü–µ–Ω':
        await prices(update, context)
    elif text == 'üí≥ –ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç':  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç"
        await buy(update, context)